{
  "site": {
    "themeName": "Default",
    "feedEnabled": true,
    "feedLength": 10,
    "custom": {
      "Default": {
        "siteName": "snippets"
      }
    }
  },
  "articles": [
    {
      "published": true,
      "noteId": "81d56bd4825b456dab58ed5ddd4893b6",
      "createdAt": 1696971509075,
      "updatedAt": 1696971535680,
      "tags": [],
      "content": "# Create and activate a python virtual env\nCreate and activate a python virtual environment\n```\n# Create the virtual env\npython3 -m venv .venv\n\n# Activate the virtual env\nsource .venv/bin/activate\n```\n* * *\n* * *",
      "url": "bash-python-ops",
      "title": "bash - python ops"
    },
    {
      "published": true,
      "noteId": "b7f82c7854334f3ab50670fb7f01aa52",
      "createdAt": 1696971379107,
      "updatedAt": 1696971438531,
      "tags": [],
      "content": "# if else examples\n\nif else, nested if, and, or, negation, file exists check, greater than, lesser than, equal to, length of variable, variable empty, file symbolic link, is directory, permissions, regular file\n\n```bash\n#Check if file does not exist or is empty\nif [[ ! -f \"$ipfile\" || ! -s \"$ipfile\" ]]\nthen\n        #do something\nelse\n        #Check if 2 variables do not have the same value\n        if [[ \"$lastip\" != \"$currip\" ]]\n        then\n                #do something\n        else\n                #do something else\n        fi\n        \n       #Check if 2 variables have same value\n        if [[ \"$currip\" == \"$trans_contip\" ]]\n        then\n                #do something\n        else\n                #do something else\n        fi\nfi\n\n\n#Check for substring match\nif [[ \"$duckdns_log\" == *\"$today_is\"* ]]\nthen\n        #do something\nelse\n        #do something else\nfi\n\n#Check if value greater than\nif [[ $VAR -gt 10 ]]\nthen\n        #do something\nelif [[ $VAR -eq 10 ]]\nthen\n        #do something else\nelse\n        #do a lot of other things maybe\nfi\n\n#---Nest If Else Example---\nif [[ $VAR1 -ge $VAR2 ]]\nthen\n  if [[ $VAR1 -ge $VAR3 ]]\n  then\n        #do something\n  else\n        #do something else\n  fi\nelse\n  if [[ $VAR2 -ge $VAR3 ]]\n  then\n        #do something\n  else\n        #do something else\n  fi\nfi\n```\n\n### Test Operators\n\nIn Bash, the test command takes one of the following syntax forms:\n\n```subunit\ntest EXPRESSION\n[ EXPRESSION ]\n[[ EXPRESSION ]]\n```\n\nTo make the script portable, prefer using the old test \\[ command, which is available on all POSIX shells. The new upgraded version of the test command \\[\\[ (double brackets) is supported on most modern systems using Bash, Zsh, and Ksh as a default shell. To negate the test expression, use the logical NOT (!) operator. When comparing strings , always use single or double quotes to avoid word splitting and globbing issues.\n\n### Most commonly used operators:\n\n- `-n VAR` \\- True if the length of VAR is greater than zero.\n- `-z VAR` \\- True if the VAR is empty.\n- `STRING1 = STRING2` \\- True if `STRING1` and `STRING2` are equal.\n- `STRING1 != STRING2`\\- True if `STRING1` and `STRING2` are not equal.\n- `INTEGER1 -eq INTEGER2` \\- True if `INTEGER1` and `INTEGER2` are equal.\n- `INTEGER1 -gt INTEGER2` \\- True if `INTEGER1` is greater than `INTEGER2`.\n- `INTEGER1 -lt INTEGER2` \\- True if `INTEGER1` is less than `INTEGER2`.\n- `INTEGER1 -ge INTEGER2` \\- True if `INTEGER1` is equal or greater than `INTEGER2`.\n- `INTEGER1 -le INTEGER2` \\- True if `INTEGER1` is equal or less than `INTEGER2`.\n- `-h FILE` \\- True if the `FILE` exists and is a symbolic link.\n- `-r FILE` \\- True if the `FILE` exists and is readable.\n- `-w FILE`\\- True if the `FILE` exists and is writable.\n- `-x FILE` \\- True if the `FILE` exists and is executable.\n- `-d FILE` \\- True if the `FILE` exists and is a directory.\n- `-e FILE` \\- True if the `FILE` exists and is a file, regardless of type (node, directory, socket, etc.).\n- `-f FILE` \\- True if the `FILE` exists and is a regular file (not a directory or device).\n\n### if Statement\n\nBash if conditionals can have different forms. The most basic if statement takes the following form:\n\n```cmake\nif TEST-COMMAND\nthen\n  STATEMENTS\nfi\n```\n\n### if..else Statement\n\nThe Bash if..else statement takes the following form:\n\n```cmake\nif TEST-COMMAND\nthen\n  STATEMENTS1\nelse\n  STATEMENTS2\nfi\n```\n\n# if..elif..else Statement\n\nThe Bash if..elif..else statement takes the following form:\n\n```bash\nif TEST-COMMAND1\nthen\n  STATEMENTS1\nelif TEST-COMMAND2\nthen\n  STATEMENTS2\nelse\n  STATEMENTS3\nfi\n```",
      "url": "bash-basics-of-shell-programming",
      "title": "bash - basics of shell programming"
    },
    {
      "published": true,
      "noteId": "37284525a30c4ade87e1ee459eccd496",
      "createdAt": 1696971228774,
      "updatedAt": 1696971341527,
      "tags": [
        "bash"
      ],
      "content": "# get external IP from command line\nexternal ip from linux command line using curl\n```\ncurl ipinfo.io/ip\n```",
      "url": "bash-networking",
      "title": "bash - networking"
    },
    {
      "published": true,
      "noteId": "affaeb867d0d4ab3b2337535882076a9",
      "createdAt": 1696970958899,
      "updatedAt": 1696971298902,
      "tags": [
        "bash"
      ],
      "content": "# Set and clear special permissions in linux\n\nSet and clear special permissions in linux for User, Group and Others\n\n```bash\n#Clear Sticky Bit for User and Group recursievly and assign  permissions of 774 - rwx rwx r-x\nchmod -R 00775 syncthing/\n\n#Set stickybit for user\nchmod 2770 community_content/\n```\n\nLinux permissions are a concept that every user becomes intimately familiar with early on in their development. We need to execute scripts, modify files, and run processes in order to administer systems effectively, but what happens when we see *Permission denied*? Do you know why we see this message? If you know the cause of the problem, do you know how to implement the solution?\n\nI will give a quick explanation of the various ways to calculate permissions, and then we will focus on the special permissions within Linux. If you want an in-depth look at the `chmod` command, check out this article from Sudoer Shashank Hegde, <ins>Linux permissions: An introduction to chmod</ins>.\n\nThe <ins>TL;DR</ins> is that there are two main ways of assigning permissions.\n\n#### Symbolic method\n\nThe symbolic method uses the following syntax:\n\n```crystal\n[tcarrigan@server ~]$ chmod WhoWhatWhich file | directory\n```\n\nWhere:\n\n- **Who** - represents identities: u,g,o,a (user, group, other, all)\n- **What** - represents actions: +, -, = (add, remove, set exact)\n- **Which** - represents access levels: r, w, x (read, write, execute)\n\nAn example of this is if I want to *add* the *read* and *write* permissions to a file named *test.txt* for *user* and *group*, I use the following command:\n\n```crystal\n[tcarrigan@server ~]$ chmod ug+rw test.txt\n```\n\nFull disclosure, this is not my preferred method of assigning permissions, and if you would like more information around this method, I recommend your nearest search engine.\n\n#### Numeric method\n\nThe numeric method is, in my experience, the best way to learn and practice permissions. It is based on the following syntax:\n\n```clean\n[tcarrigan@server ~]$ chmod ### file | directory\n```\n\nHere, from left to right, the character **#** represents an access level. There are three access levelsâ€”user, group, and others. To determine what each digit is, we use the following:\n\n- Start at 0\n- If the *read* permission should be set, add **4**\n- If the *write* permission should be set, add **2**\n- If the *execute* permission should be set, add **1**\n\nThis is calculated on a per access level basis. Let's interpret this permissions example:\n\n```ada\n-rw-r-x---\n```\n\nThe permissions are represented as **650**. How did I arrive at those numbers?\n\n- The user's permissions are: **rw-** or 4+2=**6**\n- The group's permissions are: **r-x** or 4+1=**5**\n- The others's permissions are: **\\---** or **0**\n\nTo put this into the command syntax, it looks like this:\n\n```crystal\n[tcarrigan@server ~]$ chmod 650 test.txt\n```\n\nNow that you understand the basics of permission calculation in Linux, let's look at the *special permissions* included in the OS.\n\n***\\[ You might also like: <ins>An introduction to Linux Access Control Lists (ACLs)</ins> \\]***\n\n## Special permission explained\n\nSpecial permissions make up a fourth access level in addition to **user**, **group**, and **other**. Special permissions allow for additional privileges over the standard permission sets (as the name suggests). There is a special permission option for each access level discussed previously. Let's take a look at each one individually, beginning with Set UID:\n\n## user + s (pecial)\n\nCommonly noted as **SUID**, the special permission for the user access level has a single function: A file with **SUID** always executes as the user who owns the file, regardless of the user passing the command. If the file owner doesn't have execute permissions, then use an uppercase **S** here.\n\nNow, to see this in a practical light, let's look at the `/usr/bin/passwd` command. This command, by default, has the SUID permission set:\n\n```awk\n[tcarrigan@server ~]$ ls -l /usr/bin/passwd \n-rwsr-xr-x. 1 root root 33544 Dec 13  2019 /usr/bin/passwd\n```\n\nNote the **s** where **x** would usually indicate execute permissions for the user.\n\n## group + s (pecial)\n\nCommonly noted as **SGID**, this special permission has a couple of functions:\n\n- If set on a file, it allows the file to be executed as the **group** that owns the file (similar to SUID)\n- If set on a directory, any files created in the directory will have their **group** ownership set to that of the directory owner\n\n```tap\n[tcarrigan@server article_submissions]$ ls -l \ntotal 0\ndrwxrws---. 2 tcarrigan tcarrigan 69 Apr 7 11:31 my_articles\n```\n\nThis permission set is noted by a lowercase **s** where the **x** would normally indicate **execute** privileges for the **group**. It is also especially useful for directories that are often used in collaborative efforts between members of a group. Any member of the group can access any new file. This applies to the execution of files, as well. **SGID** is very powerful when utilized properly.\n\nAs noted previously for **SUID**, if the owning group does not have execute permissions, then an uppercase **S** is used.\n\n## other + t (sticky)\n\nThe last special permission has been dubbed the \"sticky bit.\" This permission does not affect individual files. However, at the directory level, it restricts file deletion. Only the **owner** (and **root**) of a file can remove the file within that directory. A common example of this is the `/tmp` directory:\n\n```awk\n[tcarrigan@server article_submissions]$ ls -ld /tmp/\ndrwxrwxrwt. 15 root root 4096 Sep 22 15:28 /tmp/\n```\n\nThe permission set is noted by the lowercase **t**, where the **x** would normally indicate the execute privilege.\n\n## Setting special permissions\n\nTo set special permissions on a file or directory, you can utilize either of the two methods outlined for standard permissions above: Symbolic or numerical.\n\nLet's assume that we want to set **SGID** on the directory `community_content`.\n\nTo do this using the symbolic method, we do the following:\n\n```crystal\n[tcarrigan@server article_submissions]$ chmod g+s community_content/\n```\n\nUsing the numerical method, we need to pass a fourth, preceding digit in our `chmod` command. The digit used is calculated similarly to the standard permission digits:\n\n- Start at 0\n- SUID = 4\n- SGID = 2\n- Sticky = 1\n\nThe syntax is:\n\n```clean\n[tcarrigan@server ~]$ chmod X### file | directory\n```\n\nWhere **X** is the special permissions digit.\n\nHere is the command to set **SGID** on `community_content` using the numerical method:\n\n```crystal\n[tcarrigan@server article_submissions]$ chmod 2770 community_content/\n[tcarrigan@server article_submissions]$ ls -ld community_content/\ndrwxrws---. 2 tcarrigan tcarrigan 113 Apr  7 11:32 community_content/\n```\n\n***\\[ Free download: <ins>Advanced Linux commands cheat sheet.</ins> \\]***\n\n## Summary\n\nIn closing, permissions are fundamentally important to being an effective Linux administrator. There are two defined ways to set permissions using the `chmod` command: Symbolic and numerical. We examined the syntax and calculations required for both methods. We also considered the special permissions and their role in the system. Now that you understand permissions and the underlying concepts, you can solve the ever-annoying *Permission denied* error when it tries to impede your work.\n\n* * *\n\n* * *\n\n# file diff in command line\n\nfile diff in command line with a side by side view\n\n```bash\ndiff -y left_file right_file\n```\n\n- \\-y shows a side-by-side view of the 2 files\n\n* * *\n\n* * *\n\n# Add a line to top of the file\n\nAdd a line to top of the file, terminates with a new line\n\n```bash\nsed -i '1s/^/tags:: #nas_accs\\n/' admin.md\n```\n\n- \\-i in place substitution, the file(s) get updated\n\n* * *\n\n* * *\n\n# change permissions for files and folders separately\n\n```bash\nfind /path -type f -print0 | xargs -0 chmod g+rw\n\nfind /path -type d -print0 | xargs -0 chmod g+rwx\n```\n\n* * *\n\n* * *\n\n# convert file encoding\n\nconvert file encoding format\n\n```\nconvmv -f utf-8 -t utf-8 -r --notest --nfc <nextcloud-data-folder>\n```\n\n- `-f` \\- specify the current encoding of the filename(s) from which should be converted\n- `-t` \\- specify the encoding to which the filename(s) should be converted\n- `-r` \\- recursively go through directories\n- `--notest` \\- Needed to actually rename the files. By default convmv will just print what it wants to do.\n- `--nfc` \\- target files will be normalization form C for UTF-8 (Linux etc.)\n",
      "url": "bash-file-ops",
      "title": "bash - file ops"
    },
    {
      "published": true,
      "noteId": "80aec1e3ceb44174b3fc0c84ef2b7369",
      "createdAt": 1696970498264,
      "updatedAt": 1696970916145,
      "tags": [
        "bash",
        "yaml"
      ],
      "content": "# docker-compose.yml sample 1\nbind mount volume, ports, network definition, static IP\n```yaml\nversion: '3.3'\nservices:\n    adgaurdhome:\n        container_name: adguardhome\n        restart: unless-stopped\n        volumes:\n            - '/var/www/adgaurd/work:/opt/adguardhome/work'\n            - '/var/www/adgaurd/conf:/opt/adguardhome/conf'\n        ports:\n            - '192.168.1.16:53:53/tcp'\n            - '192.168.1.16:53:53/udp'\n            - '8081:8080'\n        image: adguard/adguardhome\n        networks:\n            dns_net:\n                ipv4_address: 172.11.0.14\n\nnetworks:\n  dns_net:\n    ipam:\n      driver: default\n      config:\n        - subnet: \"172.11.0.0/24\"\n```\n* * *\n* * *\n# docker-compose.yml sample 2\nvolume mounts, multiple services, depends on, env file, pre-existing network\n```yaml\nversion: \"3\"\nservices:\n  db:\n    image: mariadb\n    container_name: nextcloud-mariadb\n    volumes:\n      - db:/var/lib/mysql\n      - /etc/localtime:/etc/localtime:ro\n    env_file:\n      - maria.env\n    command: # CLI arguments\n      - \"--innodb_read_only_compressed=OFF\"\n    restart: unless-stopped\n\n  app:\n    image: nextcloud:latest\n    container_name: nextcloud-app\n    depends_on:\n      - db\n    volumes:\n      - /var/www/nextcloud/html:/var/www/html\n      - /var/www/nextcloud/html/config:/var/www/html/config\n      - /var/www/nextcloud/html/custom_apps:/var/www/html/custom_apps\n      - /srv/dev-disk-by-uuid-0253319a-75a3-4f47-8cf7-d821e7876b42/nc:/var/www/html/data\n      - /srv/dev-disk-by-uuid-0253319a-75a3-4f47-8cf7-d821e7876b42/data:/var/extdat\n      - /var/www/nextcloud/html/themes:/var/www/html/themes\n      - /etc/localtime:/etc/localtime:ro\n    env_file:\n      - nc.env\n    restart: unless-stopped\n\nvolumes:\n  db:\n\nnetworks:\n  default:\n    external: true\n    name: proxymanager_default\n```\n\n## Sample env file\n```\nCOMPOSE_PROJECT_NAME=nextcloud\nMYSQL_ROOT_PASSWORD=kkklklkkk\nMYSQL_PASSWORD=hjhjjjhhj\nMYSQL_DATABASE=nextclouddb\nMYSQL_USER=rattlehead\nPUID=1001\nPGID=1001\n```\n* * *\n* * *\n# docker container's shell\nlogin to the container's shell, execute a command in the container's shell\n```bash\n#Login to the container's shell using interactive mode\ndocker exec -it diun /bin/sh\n\n#Execute a command in the container, hence non interactive\ndocker exec diun wget --quiet -O /dev/null \"http://penang.local:3001/api/push/PTNSQOsCtG?msg=OK&ping=50\"\n```\n- `-it` - Interactive\n- For an interactive login you can mention the preferred shell instead of /bin/sh as long as that shell is available in the container.\n* * *\n* * *\n# docker listing and inspecting\ndocker container and image listing and inspecting\n```bash\n#List all containers\ndocker container list\n\n#List all images\ndocker image list\n\n#List all volumes\ndocker volume list\n\n#List all networks\ndocker network list\n\n#Inspect 1 container\ndocker container inspect [container_name|container_id]\n\n#Inspect all containers\ndocker container list --all --format \"table {{.ID}}\" |  tail -n +2 | xargs -L1 docker container inspect >> $dlog\n\n#Inspect 1 image\ndocker container inspect [image_id]\n\n#Inspect all images\ndocker image list --format \"table {{.ID}}\" | tail -n +2 | xargs -L1 docker image inspect\n```\n* * *\n* * *\n# docker start stop restart\nstart stop and restart for docker from command line\n```bash\ndocker start syncthing\n\ndocker stop syncthing\n\ndocker restart syncthing\n```\n ## Start\ndocker start [OPTIONS] CONTAINER [CONTAINER...]\n\nName, shorthand | Default | Description\n- --attach , -a | | Attach STDOUT/STDERR and forward signals\n- --checkpoint | | experimental (daemon) Restore from this checkpoint\n- --checkpoint-dir | | experimental (daemon) Use a custom checkpoint storage directory\n- --detach-keys | | Override the key sequence for detaching a container\n- --interactive , -i | | Attach container's STDIN\n## Stop\ndocker stop [OPTIONS] CONTAINER [CONTAINER...]\n\nName, shorthand | Default | Description\n- --time , -t | 10 | Seconds to wait for stop before killing it\n\n## Restart\ndocker restart [OPTIONS] CONTAINER [CONTAINER...]\n\nName, shorthand | Default | Description\n-- --time , -t | 10 | Seconds to wait for stop before killing the container\n* * *\n* * *\n",
      "url": "multi-docker-ops",
      "title": "multi - docker ops"
    },
    {
      "published": true,
      "noteId": "30de8a2ca97d4407895a46083b9948ca",
      "createdAt": 1696969605059,
      "updatedAt": 1696970475648,
      "tags": [
        "bash"
      ],
      "content": "# search inside files for a specific pattern\n```bash\n#Search all files in the path for the 'pattern', as whole word\ngrep -rnw '/path/to/somewhere/' -e 'pattern'\n\n#Search all files in the path for the 'pattern' without whole word\ngrep -rn '/path/to/somewhere/' -e 'pattern'\n\n#This will only search through those files which have .c or .h extensions:\ngrep --include=\\*.{c,h} -rnw '/path/to/somewhere/' -e \"pattern\"\n\n#This will exclude searching all the files ending with .o extension:\ngrep --exclude=\\*.o -rnw '/path/to/somewhere/' -e \"pattern\"\n\n#For directories it's possible to exclude one or more directories using the -exclude-dir parameter. For example, this will exclude the dirs dir1/, dir2/ and all of them matching *.dst/:\ngrep --exclude-dir={dir1,dir2,*.dst} -rnw '/path/to/somewhere/' -e \"pattern\"\n```\n\n- `r or R` is recursive,\n- `n` is line number, and\n- `w` stands for match the whole word.\n- `l` (lower-case L) can be added to just give the file name of matching files.\n- `e` is the pattern used during the search Along with these, --exclude, --include, --exclude-dir flags could be used for efficient searching.\n* * *\n* * *\n#  search/find and print file name along with contents\nsearch for file matching a pattern and output each filename followed by its contents\n```bash\n#Fixed string search\nfind . -name '11-08-2021_*.log' -print -exec cat {} \\;\n\n#Search using variable. Note the double quotes which allow the variable to expland\nfind . -name \"${SEARCHSTR}_*.log\" -print -exec cat {} \\;\n\n#Alternate implementation using tail with dynamic determination of patten being today's date\ntail -n +1 `date +\"%m-%d-%Y\"`_*.log\n```\n- For every result found from the find command the file name is printed with a new line followed by the file contents being printed by cat\n- The alternate implementation is simpler but includes a prefix and suffix for every filename, ex: = => 11-08-2021_DOCKINFO.log <==\n* * *\n* * *\n# sed view specific lines from a file\nview ranges of lines from files, view lines matching a pattern\n```bash\n# 1. Viewing a range of lines of a document\nsed -n '5,10p' myfile.txt\n\n# 2. Viewing the entire file except a given range\nsed '20,35d' myfile.txt\n\n# 3. Viewing non-consecutive lines and ranges\nsed -n -e '5,7p' -e '10,13p' myfile.txt\n\n# 4. Viewing lines containing with a given pattern\nsed -n '/^Jul  1/ p' /var/log/secure\n```\n\nReferenced from https://www.tecmint.com/linux-sed-command-tips-tricks/\n\n1. Viewing a range of lines of a document\nTools such as head and tail allow us to view the bottom or the top of a file. What if we need to view a section in the middle? The following sed one-liner will return lines 5 through 10 from myfile.txt:\n\n2. Viewing the entire file except a given range\nOn the other hand, itâ€™s possible that you want to print the entire file except a certain range. To exclude lines 20 through 35 from myfile.txt, do:\n\n3. Viewing non-consecutive lines and ranges\nItâ€™s possible that youâ€™re interested in set of non-consecutive lines, or in more than one range. Letâ€™s display lines 5-7 and 10-13 from myfile.txt:\n\n4. Viewing lines containing with a given pattern\nAnother use of sed consists in printing the lines from a file that match a given regular expression. For example, we may be interested in viewing the authorization and authentication activities that took place on July 2, as per the /var/log/secure log in a CentOS 7 server.\n\nIn this case, the pattern to search for is Jul 2 at the beginning of each line:\n\n* * *\n* * *\n# sed substitution\nreplace words and characters with or without a range, with regular expressions, inserting spaces, dos2unix formatting, in-place edit and backup, switch word pairs, 2 or more substitutions\n```bash\n# 1. Replacing words or characters (basic substitution)\n# 1.1\nsed 's/version/story/g' myfile.txt\n\n#1.2\nsed 's/version/story/gi' myfile.txt\n\n#1.3\nip route show | sed 's/  */ /g'\n\n# 2. Replacing words or characters inside a range\nsed '30,40 s/version/story/g' myfile.txt\n\n# 3. Using regular expressions (advanced substitution) â€“ I\nsed '/^#\\|^$\\| *#/d' httpd.conf\n\n# 4. Using regular expressions (advanced substitution) â€“ II\nsed 's/[Zz]ip/rar/g' myfile.txt\n\n# 5. Inserting spaces in files\n#5.1\nsed G myfile.txt\n#5.2 \nsed 'G;G' myfile.txt\n\n# 6. Emulating dos2unix with inline editing\nsed -i 's/\\r//' myfile.txt\n\n# 7. In-place editing and backing up original file\nsed -i'.orig' 's/this/that/gi' myfile.txt\n\n# 8. Switching pairs of words\nsed 's/^\\(.*\\),\\(.*\\)$/\\, /g' names.txt\n\n# 9. Replacing words only if a separate match is found\nsed '/services/ s/start/stop/g' msg.txt\n\n#10. Performing two or more substitutions at once\nsed -i 's/that/this/gi;s/line/verse/gi' myfile.txt\n\n# 11. Combining sed and other commands\nip route show | sed -n '/src/p' | sed -e 's/  */ /g' | cut -d' ' -f9\n```\nReferenced from https://www.tecmint.com/linux-sed-command-tips-tricks/\n\n1. **Replacing words or characters (basic substitution)**\n1.1 To replace every instance of the word version with story in myfile.txt, do.\n1.2 Additionally, you may want to consider using gi instead of g in order to ignore character case. \n1.3 To replace multiple blank spaces with a single space, we will use the output of ip route show and a pipeline.\n\n2. **Replacing words or characters inside a range**\nIf youâ€™re interested in replacing words only within a line range (30 through 40, for example), you can do. Of course, you can indicate a single line through its corresponding number instead of a range.\n\n3. **Using regular expressions (advanced substitution) â€“ I**\nSometimes configuration files are loaded with comments. While this is certainly useful, it may be helpful to display only the configuration directives sometimes if you want to view them all at a glance. The caret sign followed by the number sign (^#) indicates the beginning of a line, whereas ^$ represents blank lines. The vertical bars indicate boolean operations, whereas the backward slash is used to escape the vertical bars.\nIn this particular case, the Apache configuration file has lines with #â€™s not at the beginning of some lines, so *# is used to remove those as well.\nTo remove empty lines or those beginning with # from the Apache configuration file, do:\n\n4. **Using regular expressions (advanced substitution) â€“ II**\nTo replace a word beginning with uppercase or lowercase with another word, we can also use sed. To illustrate, letâ€™s replace the word zip or Zip with rar in myfile.txt:\n\n5. **Inserting spaces in files**\n5.1 With sed, we can also insert spaces (blank lines) for each non-empty line in a file. To insert one blank line every other line in LICENSE, a plain text file, do: \n5.2 Add an uppercase G separated by a semicolon if you want to add more blank lines. The following image illustrates the example outlined in this tip:\n\n6. **Emulating dos2unix with inline editing**\nThe dos2unix program converts plain text files from Windows/Mac formatting to Unix/Linux, removing hidden newline characters inserted by some text editors used in those platforms. If it is not installed in your Linux system, you can mimic its functionality with sed instead of installing it. Please note that the -i option indicate in-place editing. Then changes will not be returned to the screen, but will be saved to the file. You can insert DOS newline characters while editing a file in vim editor with Ctrl+V and Ctrl+M.\n\n7. **In-place editing and backing up original file**\nIn the previous tip we used sed to modify a file but did not save the original file. Sometimes itâ€™s a good idea to save a backup copy of the original file just in case. To do that, indicate a suffix following the -i option (inside single quotes) to be used to rename the original file. In the following example we will replace all instances of this or This (ignoring case) with that in myfile.txt, and we will save the original file as myfile.txt.orig. Finally, we will use diff utility to identify the differences between both files:\n\n8. **Switching pairs of words**\nLetâ€™s suppose you have a file containing full names in the format First name, Last name. To adequately process the file, you may want to switch Last name and First name. We can do that with sed fairly easily.\n\n9. **Replacing words only if a separate match is found**\nSometimes replacing all instances of a given word, or a random few, is not precisely what we need. Perhaps we need to perform the replacement if a separate match is found. For example, we may want to replace start with stop only if the word services is found in the same line. In that scenario, hereâ€™s what will happen.\n`\nWe need to start partying at work,\nbut letâ€™s remember to start all services first.\n`\nIn the first line, start will not be replaced with stop since the word services does not appear in that line, as opposed to the second line.\n\n10. **Performing two or more substitutions at once**\nYou can combine two or more substitutions one single sed command. Letâ€™s replace the words that and line in myfile.txt with This and verse, respectively. Note how this can be done by using an ordinary sed substitution command followed by a semicolon and a second substitution command.\n\n11. **Combining sed and other commands**\nOf course, sed can be combined with other tools in order to create more powerful commands. For example, letâ€™s use the example given in TIP #4 and extract our IP address from the output of the ip route command. We will begin by printing only the line where the word src is. Then we will convert multiple spaces into a single one. Finally, we will cut the 9th field (considering a single space as field separator), which is where the IP address is.\n\n# sed to replace content in files\nreplace entire lines with empty lines, replace specific strings\n```bash\n#Replace all lines starting with 'Tags: ' with an empty line\nsed -E 's/Tags: (.*)//g' *.md\n\n#Replace all strings 'Status: Completed' with 'Completed: y'\nsed -E 's/Status: Complete/Completed: y/g' *.md\n\n#Remove the first n lines. Below example removes the first 2 lines\nsed -E '1,2d' *.md\n```\n- `-i` [SUFFIX] - edit files in place (makes backup if SUFFIX supplied), ie applies substitution in the file(s). Without this it displays the substituted file content on terminal\n- `-E` extended RegEx\n\n# find command with only file name\nfind command but displays only file name in the output\n```bash\nfind . -type f -printf \"%f\\n\"\n```\n",
      "url": "bash-search-replace-and-filter",
      "title": "bash - search, replace and filter"
    },
    {
      "published": true,
      "noteId": "af70289136814b7a833b6d18e813513d",
      "createdAt": 1696969400015,
      "updatedAt": 1696969698912,
      "tags": [
        "bash"
      ],
      "content": "# Bulk renaming of files\n```bash\n#Replace all occurences of dot except the last one(extension)\n# Episode.S01E01.STREAM.mkv -> Episode S01E01 STREAM.mkv\nrename -n 's/\\.[^.]+$(*SKIP)(*F)|\\./\\ /g' *\n\n#Replace part of the text with empty string\n# Episode S01E01 720p BluRay AAC5 1.mkv -> Episode S01E01.mkv\nrename -n 's/\\ 720p\\ BluRay\\ AAC5\\ 1//' *\n\n#Retain part of the matched string, in this case the number, it is enclosed in () and \n#referenced with $1\n# Episode S01E01-The Event.mkv -> Episode S01E01 - The Event.mkv\nrename -n 's/([0-9])-/$1 - /' *\n\n#Replace all characters from last space\n#My Guide for CLI a98jdjmmv.md  -> My Guide for CLI.md\nrename -n 's/\\s+\\S*$/.md/g' *.md\n\n#Generic command for rename. Does not retain episode name if exists.\n#Use the enhanced version\n#The.Title.S05E10.1080p.5.1Ch.BluRay.ReEnc-ABC.mkv -> Episode S05E10.mkv\nrename -n 's/[a-zA-Z\\.]*(S[0-9][0-9]E[0-9][0-9])[0-9a-zA-Z\\.\\-]*(\\.mkv|\\.srt)/Episode $1$2/g' *\n#Minor variation\n#Modern.Family.S05.E01.1080p.Bluray.AAC.5.1.x265-LION[UTR].mkv -> Episode S05E01.mkv\nrename -n 's/[a-zA-Z\\.]*(S[0-9][0-9])\\.(E[0-9][0-9])[0-9a-zA-Z\\.\\-\\[\\]]*(\\.mkv|\\.srt)/Episode $1$2$3/g' *\n \n#Enhanced Generic command for rename. Does not retain episode name if exists\n#rename(The Middle (2009) - S06E19.mkv, Episode S06E19.mkv)\n#rename(The Middle (2009) - s06e19 - Siblings and Sombreros (1080p AMZN WEB-DL x265 RCVR).mkv, Episode S06E19.mkv)\n#rename(The Middle (2009) - S06E19 - Siblings and Sombreros (1080p AMZN WEB-DL x265 RCVR).mkv, Episode S06E19.mkv)\n#rename(The.Title.S05E10.1080p.5.1Ch.BluRay.ReEnc-ABC.mkv, Episode S05E10.mkv)\n#rename(Modern.Family.S06E01.720p.The.Long.Honeymoon.Web-DL.[KoTuWa].English.srt, Episode S06E01.srt)\nrename -n 's/[a-zA-Z0-9.() \\-]*[Ss]([0-9][0-9])[Ee]([0-9][0-9])[a-zA-Z0-9.() \\-\\[\\]]*(\\.mkv|\\.srt|\\.mp4)/Episode S$1E$2$3/g' *\n```\n\n**Square Brackets**\nSquare brackets ([ ]) designate a character class and match a single character in the string. Inside a character class, only the character class metacharacters (backslash, circumflex anchor and hyphen) have special meaning.\n\nYou must use a backslash when you use character class metacharacters as literals inside a character class only. Square brackets that are used as literals must always be escaped with backslash, both inside and outside a character class.\n\nFor example, [[abc] should be written: [[abc]\n\n- \\ (backslash) - general escape character\n- ^ (circumflex anchor) - negate the class, if this is the first character in the brackets (If ^ is not the first, it is not a metacharacter.)\n\n",
      "url": "bash-file-renaming",
      "title": "bash - file renaming"
    }
  ],
  "github": {
    "userName": "nsmathew",
    "email": "nitn_mathew2000@hotmail.com",
    "repositoryName": "my-snippets"
  }
}